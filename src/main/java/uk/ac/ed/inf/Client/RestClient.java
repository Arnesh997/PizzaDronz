package uk.ac.ed.inf.Client;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;import uk.ac.ed.inf.ilp.data.NamedRegion;import uk.ac.ed.inf.ilp.data.Order;import uk.ac.ed.inf.ilp.data.Restaurant;import java.io.IOException;import java.net.MalformedURLException;import java.net.URL;import java.util.ArrayList;import java.util.List;/** * RestClient class is responsible for retrieving data from the REST server */public class RestClient {    private String BASE_URL;    private final ObjectMapper mapper = new ObjectMapper().registerModule(new JavaTimeModule());    /**     * Constructor for RestClient     * @param BASE_URL the base URL of the REST server     */    public RestClient(String BASE_URL) {        this.BASE_URL = BASE_URL.endsWith("/") ? BASE_URL : BASE_URL + "/";    }    /**     * Checks if the REST server is Alive     * @return true if the REST server is alive, false otherwise     */    public boolean isAlive(){        try {            URL isAliveUrl = new URL(BASE_URL + "isAlive");            return mapper.readValue(isAliveUrl, Boolean.class);        } catch (IOException e) {            System.err.println("Error connecting to isAlive endpoint: " + e.getMessage());            System.exit(1);        }        return false;    }    /**     * Retrieves all the restaurants from the REST server     * @return an array of restaurants     */    public Restaurant[] getRestaurants() {        try {            URL restaurantsUrl = new URL(BASE_URL + "/restaurants");            return mapper.readValue(restaurantsUrl, Restaurant[].class);        } catch (IOException e) {            System.err.println("Restaurants Fetch Unsuccessful. Error: " + e.getMessage());            System.exit(1);        }        return new Restaurant[]{};    }    /**     * Retrieves all the orders on a specific from the REST server     * @param date the date to retrieve orders from     * @return a list of orders on the specified date     */    public List<Order> getOrders(String date) {        try {            URL ordersUrl = new URL(BASE_URL + "/orders/" + date);            List<Order> orders = mapper.readValue(ordersUrl, new TypeReference<List<Order>>(){});            return orders;        } catch (IOException e) {            System.err.println("Order Fetch Unsuccessful. Error: " + e.getMessage());            System.exit(1);        }        return new ArrayList<>();    }    /**     * Retrieves all the noFlyZones from the REST server     * @return a list of noFlyZones     */    public List<NamedRegion> getNoFlyZones() {        try {            URL noFlyZonesUrl = new URL(BASE_URL + "/noFlyZones");            return mapper.readValue(noFlyZonesUrl, new TypeReference<List<NamedRegion>>(){});        } catch (IOException e) {            System.err.println("NoFlyZone Named Regions Fetch Unsuccessful: " + e.getMessage());            System.exit(1);        }        return new ArrayList<>();    }    /**     * Retrieves the centralArea from the REST server     * @return the centralArea NamedRegion     */    public NamedRegion getCentralArea() {        try {            URL centralAreaUrl = new URL(BASE_URL + "/centralArea");            return mapper.readValue(centralAreaUrl, new TypeReference<NamedRegion>(){});        } catch (IOException e) {            System.err.println("Central Area NamedRegion Fetch Unsuccessful: " + e.getMessage());            System.exit(1);        }        return null;    }    /**     * Retrieves all the orders from the REST server     * @return a list of orders     */    public List<Order> getOrders() {        try {            URL ordersUrl = new URL(BASE_URL + "/orders");            return mapper.readValue(ordersUrl, new TypeReference<List<Order>>(){});        } catch (IOException e) {            System.err.println("Error in URL for getOrders: " + e.getMessage());            System.exit(1);        }        return new ArrayList<>();    }}