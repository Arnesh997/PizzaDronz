package uk.ac.ed.inf.Client;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;import uk.ac.ed.inf.ilp.data.NamedRegion;import uk.ac.ed.inf.ilp.data.Order;import uk.ac.ed.inf.ilp.data.Restaurant;import java.io.IOException;import java.net.URL;import java.util.List;public class RestClient {    private String BASE_URL;    private final ObjectMapper mapper = new ObjectMapper().registerModule(new JavaTimeModule());    public RestClient(String BASE_URL) {        if(BASE_URL.endsWith("/") == false){            BASE_URL += "/";        }        this.BASE_URL = BASE_URL;    }//    Get method to fetch all registered restaurants    public Restaurant[] getRestaurants() {        Restaurant[] restaurants = null;        try {            URL restaurantsUrl = new URL(BASE_URL + "/restaurants");            restaurants = mapper.readValue(restaurantsUrl, Restaurant[].class);        } catch (IOException e) {            System.err.println("Error fetching restaurants: " + e.getMessage());            System.exit(3);        }        return restaurants;    }    public List<NamedRegion> getNoFlyZones() {        List<NamedRegion> noFlyZones = null;        try {            URL noFlyZonesUrl = new URL(BASE_URL + "/noFlyZones");            noFlyZones = mapper.readValue(noFlyZonesUrl, new TypeReference<List<NamedRegion>>(){});        } catch (IOException e) {            System.err.println("Error fetching no fly zones: " + e.getMessage());            System.exit(3);        }        return noFlyZones;    }//    Get method to fetch the coordinates of the central area    public NamedRegion getCentralArea(){        NamedRegion centralArea = null;        try {            URL centralAreaUrl = new URL(BASE_URL + "/centralArea");            centralArea = mapper.readValue(centralAreaUrl, new TypeReference<NamedRegion>(){});        } catch (IOException e) {            System.err.println("Error fetching central area: " + e.getMessage());            System.exit(3);        }        return centralArea;    }    public List<Order> getOrders() {        List<Order> orders = null;        try {            URL ordersUrl = new URL(BASE_URL + "/orders");            orders = mapper.readValue(ordersUrl, new TypeReference<List<Order>>(){});        } catch (IOException e) {            System.err.println("Error fetching orders: " + e.getMessage());            System.exit(3);        }        return orders;    }    public List<Order> getOrders(String date) {        List<Order> orders = null;        try {            URL ordersUrl = new URL(BASE_URL + "/orders/" + date);            orders = mapper.readValue(ordersUrl, new TypeReference<List<Order>>(){});        } catch (IOException e) {            System.err.println("Error fetching orders: " + e.getMessage());            System.exit(3);        }        return orders;    }}