package uk.ac.ed.inf;import uk.ac.ed.inf.ilp.data.Order;import uk.ac.ed.inf.ilp.data.Restaurant;import uk.ac.ed.inf.ilp.interfaces.OrderValidation;public class MainOrderValidation implements OrderValidation{/* Information about orders from provided ourse SpecificationWe haven’t said much so far about the nature of a pizza order so let’s discuss that now. As you might imagine, there is a limit on the weight that the drone can lift. The maximum number of items in an order has been fixed so that the drone will always be able to lift the order, even if it consists of the heaviest pizzas which can be ordered by the drone service. There are other constraints also, as listed below.1. An order can have a minimum of one pizza, and a maximum of four. 2. Every order is subject to a fixed delivery charge, which is £1.The restaurants which participate in the service are notified when the drone will arrive; they start cooking the pizza(s) and then when the drone arrives they place the pizzas in an insulated box, and fix the box to the drone when it is hovering close to the location of the restaurant/pizza shop. We imagine that the insulated box is hanging down from the drone so that the drone is always hovering some safe height above the user’s head.—⋄—The box can contain pizzas up to 14 inches in diameter, but not larger than this. None of the pizzasreturned by the REST-request to restaurants are larger than this. —⋄—We will not be very concerned here with the system which sends web or text message order notifications to the shops; the architects of the drone service already have a system in place for this. However, due to a misunderstanding between the web front end back-end team, each thought that the other was responsible for validating the data entered by the customer and as a result neither team has implemented this. This means that there will be invalid orders in the REST-responses from orders which you must detect and filter out and not attempt to deliver. We will give examples later.0.7.2 The structure of the ordersThe information about each day’s orders is returned in the REST-request to orders and is delivered as an array of JSON-elements like (each one representing one order):CHAPTER 0. THE COURSEWORK SPECIFICATION 18 {"orderNo ": "19514FE0" ,"orderDate ": "2023−09−01", "orderStatus": "UNDEFINED"," orderValidationCode " : "UNDEFINED" , "priceTotalInPence ": 2400, "pizzasInOrder": [{"name": "Super Cheese", "priceInPence": 1400}, {"priceInPence": 900 }],"creditCardInformation ": {" creditCardNumber " : "13499472696504" , "creditCardExpiry": "06/28","cvv": "952"} }—⋄—From this we learn that order number 19514FE0 was for two items. All items in an order must comefrom the same pizza restaurant and are valid pizzas14 —⋄—These orders are returned for the entire covered period and contain invalid orders as well. Past orders are not to be consideredSo, you have to check card number, expiration, order date and items among other details (as described in this document) as well.Your task will be to create a Java object (named Order) for these orders where the corresponding data types for members can be derived from the JSON format. For example, orderNo is provided as a string (using ""), which implies that member orderNo in class Order is of type String as well.0.7.3 The statuds and validation of an orderBecause some orders may be invalid the drone must not deliver these orders. We will use the following enum to classify order status/∗∗∗ the status an order can have ∗/public enum OrderStatus { /∗∗∗ it was delivered∗/DELIVERED,"name": "All Shrooms", 14The restaurants and their pizzas can be retrieved using the restaurants REST endpointCHAPTER 0. THE COURSEWORK SPECIFICATION 19/∗∗∗ it is invalid ∗/INVALID ,/∗∗∗ the state is currently undefined ∗/UNDEFINED,/∗∗∗ the order is valid as such, yet has not been delivered ∗/VALID_BUT_NOT_DELIVERED }and order validation:/∗∗∗ error reason codes for an invalid order ∗/public enum OrderValidationCode { /∗∗∗ the reason code is undefined∗/UNDEFINED,/∗∗∗ no error present ∗/NO_ERROR,/∗∗∗ the card number is incorrect ∗/CARD_NUMBER_INVALID,/∗∗∗ expiry date problem ∗/EXPIRY_DATE_INVALID,/∗∗∗ CVC is wrong ∗/CVV_INVALID,/∗∗∗ order total is incorrect ∗/TOTAL_INCORRECT,/∗∗CHAPTER 0. THE COURSEWORK SPECIFICATION 20∗ a pizza in the order is undefined∗/PIZZA_NOT_DEFINED,/∗∗∗ too many pizzas ordered ∗/MAX_PIZZA_COUNT_EXCEEDED,/∗∗∗ pizzas were ordered from multiple restaurants ∗/PIZZA_FROM_MULTIPLE_RESTAURANTS,/∗∗∗ the restaurant is closed on the order day ∗/RESTAURANT_CLOSED }** */    @Override    public Order validateOrder(Order orderToValidate, Restaurant[] definedRestaurants) {//        Order validation code based on above comments        return null;    }}