package uk.ac.ed.inf;import org.json.JSONObject;import org.json.JSONArray;import uk.ac.ed.inf.GeoJsonConverter;import uk.ac.ed.inf.Node;import uk.ac.ed.inf.ilp.data.Order;import java.time.LocalDate;import java.nio.file.Path;import java.nio.file.Paths;import java.nio.file.Files;import java.nio.file.StandardOpenOption;import java.io.IOException;import java.util.List;public class DroneDeliveryRecorder {    private LocalDate date;    private Path resultFilesDirectory;    public DroneDeliveryRecorder(LocalDate date) {        this.date = date;        this.resultFilesDirectory = Paths.get("resultfiles");        try {            Files.createDirectories(resultFilesDirectory); // Ensure the directory exists        } catch (IOException e) {            e.printStackTrace();        }    }    private String getFormattedDate() {        return date.toString(); // LocalDate.toString() returns the date in YYYY-MM-DD format    }    private void createDeliveriesFile(List<Order> orders) throws IOException {        String filename = "deliveries-" + getFormattedDate() + ".json";        Path filePath = resultFilesDirectory.resolve(filename);        JSONArray deliveriesArray = new JSONArray();        for (Order order : orders) {            JSONObject orderJson = new JSONObject();            // Add order details to orderJson            orderJson.put("orderNo", order.getOrderNo());            orderJson.put("status", order.getOrderStatus().toString());            // Add more fields as needed            deliveriesArray.put(orderJson);        }        Files.writeString(filePath, deliveriesArray.toString(), StandardOpenOption.CREATE);    }    private void createFlightpathFile(List<Node> flightPath) throws IOException {        String filename = "flightpath-" + getFormattedDate() + ".json";        Path filePath = resultFilesDirectory.resolve(filename);        JSONArray flightPathArray = new JSONArray();        for (Node node : flightPath) {            JSONArray coordinates = new JSONArray();            coordinates.put(node.getLocation().lng());            coordinates.put(node.getLocation().lat());            flightPathArray.put(coordinates);        }        Files.writeString(filePath, flightPathArray.toString(), StandardOpenOption.CREATE);    }    private void createDroneGeoJsonFile(List<Node> flightPathNodes) throws IOException {        String filename = "drone-" + getFormattedDate() + ".geojson";        Path filePath = resultFilesDirectory.resolve(filename);        // Use your existing GeoJsonConverter to convert flightPathNodes to GeoJSON        String geoJsonString = GeoJsonConverter.convertNodesToGeoJson(flightPathNodes);        Files.writeString(filePath, geoJsonString, StandardOpenOption.CREATE);    }    public void generateDeliveryFiles(List<Order> orders, List<Node> flightPath) throws IOException {        createDeliveriesFile(orders);        createFlightpathFile(flightPath);        createDroneGeoJsonFile(flightPath);    }}