package uk.ac.ed.inf.controller;//import uk.ac.ed.inf.AStarPathControl;import uk.ac.ed.inf.AStarPathControl;import uk.ac.ed.inf.MainOrderValidation;import uk.ac.ed.inf.Node;import uk.ac.ed.inf.ilp.constant.OrderStatus;import uk.ac.ed.inf.ilp.data.*;import java.time.LocalDate;import java.util.ArrayList;import java.util.HashMap;import java.util.List;public class DeliveryController {    private  Restaurant[] restaurants;    private   List<NamedRegion> noFlyZones;    private  NamedRegion centralArea;    private  List<Order> orders;    private  String BASE_URL;    private  LocalDate date;    private HashMap<String,LngLat> pizzaLocationMap= new HashMap<>();    public DeliveryController(LocalDate date, String BASE_URL){        this.date = date;        this.BASE_URL = BASE_URL;        RestClientController restClientController = new RestClientController(BASE_URL);        this.restaurants = restClientController.getRestaurants();        this.noFlyZones = restClientController.getNoFlyZones();        this.centralArea = restClientController.getCentralArea();        this.orders = restClientController.getOrders();        for(Restaurant restaurant: restaurants){            for(Pizza pizza: restaurant.menu()){                pizzaLocationMap.put(pizza.name(),restaurant.location());            }        }    }//    public LngLat[] getRestaurantLocation(Order)    public void run(){        // Order controlling code        // Updating this.orders with orders on a given date        RestClientController restClientController = new RestClientController(BASE_URL);        orders = restClientController.getOrders(date.toString());        List<Order> validOrders = checkOrders(this.orders);        System.out.println("Valid orders: "+validOrders.size());        for (Order order : validOrders) {            System.out.println(order);        }        System.out.println("No Fly Zones: "+this.noFlyZones.get(0));        // Path-finding code//        AStarPathControl pathController = new AStarPathControl(this.restaurants, this.noFlyZones, this.centralArea);//        for(Order order : validOrders){////          Sending the restaurant coordinates as the start node//            LngLat start = pizzaLocationMap.get(order.getPizzasInOrder()[0]);//            List<Node> path = pathController.findPath(start);////        }    }    private List<Order> checkOrders(List<Order> orders) {        List<Order> validOrders = new ArrayList<>();        MainOrderValidation orderValidator = new MainOrderValidation();        for (Order order : orders) {            Order checkedOrder = orderValidator.validateOrder(order, this.restaurants);            if (checkedOrder.getOrderStatus() == OrderStatus.VALID_BUT_NOT_DELIVERED) {                validOrders.add(order); // Only add valid orders to the new list            }        }        return validOrders;    }}