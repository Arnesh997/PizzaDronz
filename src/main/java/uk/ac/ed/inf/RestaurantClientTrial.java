package uk.ac.ed.inf;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;import uk.ac.ed.inf.ilp.data.Order;import uk.ac.ed.inf.ilp.data.Restaurant;import uk.ac.ed.inf.ilp.data.CreditCardInformation;import java.io.IOException;import java.net.URL;import java.time.LocalDate;import java.time.format.DateTimeParseException;public class RestaurantClientTrial {    public static final String RESTAURANT_URL = "restaurants";    public static final String ORDERS_URL = "orders"; // Placeholder, the actual URL may be different    public static void main(String[] args) {        if (args.length < 2){            System.err.println("Usage: <base URL> <date>");            System.exit(1);        }        String baseUrl = args[0];        String dateString = args[1];        // Ensure the base URL ends with a slash        if (!baseUrl.endsWith("/")) {            baseUrl += "/";        }        // Validate the date format//        LocalDate date = LocalDate.of(2023,9,01);        LocalDate date = null;        try {            date = LocalDate.parse(dateString);        } catch (DateTimeParseException e) {            System.err.println("The date provided is invalid: " + e.getMessage());            System.exit(2);        }        // Initialize ObjectMapper        ObjectMapper mapper = new ObjectMapper();        mapper.registerModule(new JavaTimeModule());        // Fetch and print restaurants (this can be separated into its own method if needed)        fetchAndPrintRestaurants(baseUrl, mapper);        // Fetch orders for the specified date        fetchAndPrintOrdersForDate(baseUrl, date, mapper);    }    private static void fetchAndPrintRestaurants(String baseUrl, ObjectMapper mapper) {        try {            URL restaurantsUrl = new URL(baseUrl + RESTAURANT_URL);            Restaurant[] restaurants = mapper.readValue(restaurantsUrl, Restaurant[].class);            System.out.println("Read all restaurants:");            for (Restaurant r : restaurants) {                System.out.println(r.name()); // Assuming there's a getName() method in the Restaurant class            }        } catch (IOException e) {            System.err.println("Error fetching restaurants: " + e.getMessage());            System.exit(3);        }    }    private static void fetchAndPrintOrdersForDate(String baseUrl, LocalDate date, ObjectMapper mapper) {        try {            URL ordersUrl = new URL(baseUrl + ORDERS_URL + "?orderDate=" + date);            Order[] orders = mapper.readValue(ordersUrl, Order[].class);            System.out.println("Read all orders for " + date + ":");            for (Order order : orders) {                System.out.println(order); // You need to define the Order class and its toString() method            }        } catch (IOException e) {            System.err.println("Error fetching orders: " + e.getMessage());            System.exit(4);        }    }}