package uk.ac.ed.inf;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import org.junit.BeforeClass;import org.junit.Test;import uk.ac.ed.inf.ilp.data.*;import uk.ac.ed.inf.ilp.constant.*;import uk.ac.ed.inf.MainOrderValidation.*;import java.time.DayOfWeek;public class OrderValidationTest {    @BeforeClass    public static void setUp() {//      Restaurant 1: Civerinos Slice        LngLat civerinosSliceLngLat = new LngLat(-3.1912869215011597,  55.945535152517735);        DayOfWeek[] civerinosSliceOpenDay = {DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.FRIDAY, DayOfWeek.SATURDAY, DayOfWeek.SUNDAY};        Pizza[] civerinosMenu = {new Pizza("Margarita", 1000), new Pizza("Calzone", 1400)};//  Restaurant 2: Sora Lella Vegan Restaurant        LngLat soraLellaLngLat = new LngLat(-3.202541470527649, 55.943284737579376);        DayOfWeek[] soraLellaOpenDay = {DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.THURSDAY, DayOfWeek.FRIDAY};        Pizza[] soraLellaMenu = {new Pizza("Meat Lover=", 1400), new Pizza("Vegan Delight", 1100)};//  Restaurant 3: Domino's Pizza - Edinburgh - Southside        LngLat dominosLngLat = new LngLat(-3.1838572025299072, 55.94449876875712);        DayOfWeek[] dominosOpenDay = {DayOfWeek.WEDNESDAY, DayOfWeek.THURSDAY, DayOfWeek.FRIDAY, DayOfWeek.SATURDAY, DayOfWeek.SUNDAY};        Pizza[] dominosMenu = {new Pizza("Super Cheese", 1400), new Pizza("All Shrooms", 900)};//  Restaurant 4: Sodeberg Pavillion        LngLat sodebergLngLat = new LngLat(-3.1940174102783203, 55.94390696616939);        DayOfWeek[] sodebergOpenDay = {DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY, DayOfWeek.SATURDAY, DayOfWeek.SUNDAY};        Pizza[] sodebergMenu = {new Pizza("Proper Pizza", 1400), new Pizza("Pineapple & Ham & Cheese", 900)};        Restaurant[] restaurants = new Restaurant[4];        restaurants[0] = new Restaurant("Civerinos Slice", civerinosSliceLngLat, civerinosSliceOpenDay, civerinosMenu);        restaurants[1] = new Restaurant("Sora Lella Vegan Restaurant", soraLellaLngLat, soraLellaOpenDay, soraLellaMenu);        restaurants[2] = new Restaurant("Domino's Pizza - Edinburgh - Southside", dominosLngLat, dominosOpenDay, dominosMenu);        restaurants[3] = new Restaurant("Sodeberg Pavillion", sodebergLngLat, sodebergOpenDay, sodebergMenu);        MainOrderValidation.setup(restaurants);    }    /********* Pizza Count Checks *********/    @Test    public void pizzaCountNotExceedTest(){        MainOrderValidation test = new MainOrderValidation();        Pizza[] pizzas = new Pizza[3];        pizzas[0] = new Pizza("margherita", 100);        pizzas[1] = new Pizza("margherita", 200);        pizzas[2] = new Pizza("margherita", 100);        assertTrue(test.countCheck(pizzas));    }    @Test    public void pizzaCountExceedTest(){        MainOrderValidation test = new MainOrderValidation();        Pizza[] pizzas = new Pizza[5];        pizzas[0] = new Pizza("margherita", 100);        pizzas[1] = new Pizza("margherita", 200);        pizzas[2] = new Pizza("margherita", 100);        pizzas[3] = new Pizza("margherita", 100);        pizzas[4] = new Pizza("margherita", 100);        assertFalse(test.countCheck(pizzas));    }    @Test    public void pizzaCountZeroTest(){        MainOrderValidation test = new MainOrderValidation();        Pizza[] pizzas = new Pizza[0];        assertFalse(test.countCheck(pizzas));    }    @Test    public void pizzaCountEqualMaxCheck(){        MainOrderValidation test = new MainOrderValidation();        Pizza[] pizzas = new Pizza[4];        pizzas[0] = new Pizza("margherita", 100);        pizzas[1] = new Pizza("margherita", 200);        pizzas[2] = new Pizza("margherita", 100);        pizzas[3] = new Pizza("margherita", 100);        assertTrue(test.countCheck(pizzas));    }/****** Total Price Validation Check ******/// Need to define restaurants to feed into HashMap for price matching//    @Test//    public void totalPriceCheckCorrect(){//        Restaurant[] restaurants = new Restaurant[2];//        restaurants[0] = new Restaurant("Dominos", 1, 1, 1, 1, 1, 1);////    }}